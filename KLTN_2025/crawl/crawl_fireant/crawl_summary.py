import json
import time
from bs4 import BeautifulSoup
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def setup_driver():
    options = Options()
    options.add_argument("--start-maximized")
    options.add_argument("--disable-notifications")
    return webdriver.Chrome(options=options)

def extract_ai_summary(driver, url):
    try:
        driver.get(url)
        time.sleep(2)

        # B·∫•m n√∫t t√≥m t·∫Øt
        ai_button = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'T√≥m t·∫Øt tin t·ª©c b·∫±ng AI')]"))
        )
        ai_button.click()

        # ƒê·ª£i ph·∫ßn t√≥m t·∫Øt hi·ªÉn th·ªã
        ai_summary_tag = WebDriverWait(driver, 12).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div.italic:not(.font-bold)"))
        )
        return ai_summary_tag.text.strip()

    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y AI summary t·ª´ {url}: {e}")
        return ""

def fill_missing_summaries(input_path="vip_VC.json", output_path="vip_VC_updated.json"):
    with open(input_path, "r", encoding="utf-8") as f:
        articles = json.load(f)

    driver = setup_driver()
    updated = 0

    for idx, article in enumerate(articles):
        if not article.get("ai_summary"):
            print(f"üìù ({idx+1}/{len(articles)}) ƒêang x·ª≠ l√Ω l·∫°i: {article['link']}")
            summary = extract_ai_summary(driver, article["link"])
            if summary:
                article["ai_summary"] = summary
                updated += 1

    driver.quit()

    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(articles, f, ensure_ascii=False, indent=2)

    print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {updated} b√†i vi·∫øt c√≥ ai_summary b·ªã thi·∫øu.")

# üëâ Ch·∫°y ch√≠nh
if __name__ == "__main__":
    fill_missing_summaries()
